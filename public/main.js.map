{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/display-table/display-table.component.css","webpack:///./src/app/display-table/display-table.component.html","webpack:///./src/app/display-table/display-table.component.ts","webpack:///./src/app/home.component.html","webpack:///./src/app/home.component.ts","webpack:///./src/app/navbar.component.css","webpack:///./src/app/navbar.component.html","webpack:///./src/app/navbar.component.ts","webpack:///./src/app/order/order.component.css","webpack:///./src/app/order/order.component.html","webpack:///./src/app/order/order.component.ts","webpack:///./src/app/services/dbService/database.service.ts","webpack:///./src/app/set-prediction/set-prediction.component.css","webpack:///./src/app/set-prediction/set-prediction.component.html","webpack:///./src/app/set-prediction/set-prediction.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,8C;;;;;;;;;;;;;;;;;;;;;ACA0C;AAS1C;IAAA;IAEA,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTiC;AACjB;AACM;AAEA;AACU;AAC0B;AAC9B;AACA;AACG;AACgB;AAEQ;AAC/B;AA2BjD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAxBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,qEAAc;gBACd,+FAAsB;gBACtB,iEAAe;gBACf,6FAAqB;gBACrB,8DAAa;aACd;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,kEAAmB;gBACnB,qEAAgB;gBAChB,4DAAY,CAAC,OAAO,CAAC;oBACnB,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qEAAc,EAAE;oBAC5C,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,+FAAsB,EAAE;oBACtD,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,6FAAqB,EAAE;oBACrD,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,8DAAa,EAAE;oBAC1C,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,8DAAa,EAAE;iBACvC,CAAC;aACH;YACD,SAAS,EAAE,CAAC,oFAAe,CAAC;YAC5B,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACxCtB,mB;;;;;;;;;;;ACAA,idAAid,cAAc,uBAAuB,kBAAkB,uBAAuB,wBAAwB,uBAAuB,mBAAmB,kU;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA/iB;AACuB;AACjB;AAMxD;IAIE,+BAAoB,UAA2B;QAA3B,eAAU,GAAV,UAAU,CAAiB;QAH/C,WAAM,GAAG,EAAE,CAAC;IAIX,CAAC;IAEF,wCAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE;aAC5B,SAAS,CAAC,aAAG,IAAI,YAAI,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAA9B,CAA8B,EACrC,eAAK,IAAI,cAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;IAC5C,CAAC;IAED,2CAAW,GAAX,UAAY,KAAU;QAAtB,iBASC;QARC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC;aAC/B,SAAS,CAAC,aAAG,IAAI,YAAI,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAA9B,CAA8B,EACrC,eAAK,IAAI,cAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;QAE1C,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE;aAC5B,SAAS,CAAC,aAAG;YAAM,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC;YACnD,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;QAAC,CAAC,EAC5B,eAAK,IAAI,cAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;IAC5C,CAAC;IAED,8CAAc,GAAd;QACE,IAAI,qEAAW,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAC5C,CAAC;IA1BU,qBAAqB;QAJjC,+DAAS,CAAC;;;SAGV,CAAC;yCAKgC,oFAAe;OAJpC,qBAAqB,CA2BjC;IAAD,4BAAC;CAAA;AA3BiC;;;;;;;;;;;;ACRlC,wD;;;;;;;;;;;;;;;;;;;;;ACA0C;AAK1C;IAAA;IAEA,CAAC;IAFY,aAAa;QAHzB,+DAAS,CAAC;;SAEV,CAAC;OACW,aAAa,CAEzB;IAAD,oBAAC;CAAA;AAFyB;;;;;;;;;;;;ACL1B,iCAAiC,iBAAiB,KAAK,C;;;;;;;;;;;ACAvD,42B;;;;;;;;;;;;;;;;;;;;;ACA0C;AAO1C;IAAA;IAEA,CAAC;IAFY,eAAe;QAL3B,+DAAS,CAAC;YACP,QAAQ,EAAE,YAAY;;;SAGzB,CAAC;OACW,eAAe,CAE3B;IAAD,sBAAC;CAAA;AAF2B;;;;;;;;;;;;ACP5B,mB;;;;;;;;;;;ACAA,qOAAqO,gWAAgW,aAAa,iZ;;;;;;;;;;;;;;;;;;;;;;;;;;ACAhiB;AAE+B;AACH;AAM9E;IAUE,wBAAoB,UAA2B;QAA3B,eAAU,GAAV,UAAU,CAAiB;QAR/C,WAAM,GAAa,EAAE,CAAC;QAGtB,UAAK,GAAG,IAAI,wDAAS,CAAC;YACpB,IAAI,EAAG,IAAI,0DAAW,EAAE;YACxB,QAAQ,EAAG,IAAI,0DAAW,EAAE;SAC7B,CAAC,CAAC;IAEgD,CAAC;IAEpD,iCAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;aAC3B,SAAS,CAAC,kBAAQ,IAAI,YAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAnC,CAAmC,EAC/C,eAAK,IAAI,cAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;IAC5C,CAAC;IAED,qCAAY,GAAZ,UAAa,KAAK;QAChB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;YACpB,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;SACzB,CAAC,CAAC;IACL,CAAC;IAED,oCAAW,GAAX,UAAY,SAAc;QAA1B,iBAIC;QAHC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC;aAClC,SAAS,CAAC,kBAAQ,IAAI,YAAI,CAAC,QAAQ,GAAG,QAAQ,EAAxB,CAAwB,EACpC,eAAK,IAAI,cAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;IAC5C,CAAC;IA5BU,cAAc;QAJ1B,+DAAS,CAAC;;;SAGV,CAAC;yCAWgC,2FAAe;OAVpC,cAAc,CA6B1B;IAAD,qBAAC;CAAA;AA7B0B;;;;;;;;;;;;;;;;;;;;;;;;;;ACTgB;AACO;AAIlD;IAKE,yBAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;QAH7B,SAAI,GAAG,uBAAuB,CAAC;QACvC,WAAM,GAAkB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAEC,CAAC;IAE1C,sCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAM,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,uCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAM,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC;IACvD,CAAC;IAED,oCAAU,GAAV,UAAW,SAAc;QACvB,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAM,IAAI,CAAC,IAAI,GAAG,aAAa,EAAE,SAAS,CAAC,CAAC;IACpE,CAAC;IAED,uCAAa,GAAb,UAAc,cAAmB;QAC/B,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,cAAc,CAAC,CAAC;QACtD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAM,IAAI,CAAC,IAAI,GAAG,UAAU,EAAE,cAAc,CAAC,CAAC;IACtE,CAAC;IAED,qCAAW,GAAX,UAAY,KAAU;QACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAM,IAAI,CAAC,IAAI,GAAG,cAAc,EAAE,KAAK,CAAC,CAAC;IACjE,CAAC;IA3BU,eAAe;QAD3B,gEAAU,EAAE;yCAMgB,+DAAU;OAL1B,eAAe,CA4B3B;IAAD,sBAAC;CAAA;AA5B2B;;;;;;;;;;;;ACL5B,mB;;;;;;;;;;;ACAA,+PAA+P,kWAAkW,aAAa,qZ;;;;;;;;;;;;;;;;;;;;;;;;;;ACA5jB;AAC4B;AACtB;AAMxD;IAQE,gCAAoB,UAA2B;QAA3B,eAAU,GAAV,UAAU,CAAiB;QAN/C,WAAM,GAAa,EAAE,CAAC;QAEtB,oBAAe,GAAG,IAAI,wDAAS,CAAC;YAC9B,IAAI,EAAG,IAAI,0DAAW,EAAE;YACxB,QAAQ,EAAG,IAAI,0DAAW,EAAE;SAC7B,CAAC,CAAC;IACgD,CAAC;IAEpD,yCAAQ,GAAR;QAAA,iBAIC;QAHC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;aAC7B,SAAS,CAAC,cAAI,IAAI,YAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAA/B,CAA+B,EACvC,eAAK,IAAI,cAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;IAC1C,CAAC;IAED,6CAAY,GAAZ,UAAa,KAAK;QAChB,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;YAC9B,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;SACzB,CAAC,CAAC;IACL,CAAC;IAED,+CAAc,GAAd,UAAe,cAAmB;QAAlC,iBAKC;QAJC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,cAAc,CAAC;aAC1C,SAAS,CAAC,kBAAQ,IAAI,YAAI,CAAC,QAAQ,GAAG,QAAQ,EAAxB,CAAwB,EACpC,eAAK,IAAI,cAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,EAA5B,CAA4B,CAC/C,CAAC;IACN,CAAC;IA3BU,sBAAsB;QAJlC,+DAAS,CAAC;;;SAGV,CAAC;yCASgC,2FAAe;OARpC,sBAAsB,CA4BlC;IAAD,6BAAC;CAAA;AA5BkC;;;;;;;;;;;;;;ACRnC;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n\"","import { Component } from '@angular/core';\nimport { NavbarComponent } from './navbar.component';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { OrderComponent } from './order/order.component';\nimport { SetPredictionComponent } from './set-prediction/set-prediction.component';\nimport { NavbarComponent } from './navbar.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DatabaseService } from './services/dbService/database.service';\nimport { OrderModel } from './order/order-model';\nimport { DisplayTableComponent } from './display-table/display-table.component';\nimport { HomeComponent } from './home.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    OrderComponent,\n    SetPredictionComponent,\n    NavbarComponent,\n    DisplayTableComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RouterModule.forRoot([\n      { path: 'order', component: OrderComponent },\n      { path: 'predict', component: SetPredictionComponent },\n      { path: 'display', component: DisplayTableComponent },\n      { path: 'home', component: HomeComponent },\n      { path: '', component: HomeComponent },\n    ])\n  ],\n  providers: [DatabaseService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-3\\\">\\n  </div>\\n  <div class=\\\"col-md-6\\\">\\n    <legend>Report</legend>\\n    <table id=\\\"export_table\\\" class=\\\"table table-striped table-bordered\\\">\\n      <tbody>\\n        <tr>\\n          <th>Name</th>\\n          <th>Quantity</th>\\n          <th>Created till now</th>\\n          <th>Predicted</th>\\n          <th>Status</th>\\n        </tr>\\n        <tr *ngFor=\\\"let order of orders\\\">\\n          <td>{{ order.name }}</td>\\n          <td>{{ order.quantity }}</td>\\n          <td>{{ order.createdTillNow }}</td>\\n          <td>{{ order.predicted }}</td>\\n          <td>\\n            <button class=\\\"btn btn-primary\\\" \\n            (click)=\\\"updateOrder(order)\\\">DONE\\n            </button>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n    <button class=\\\"btn btn-warning\\\"(click)=\\\"generateReport()\\\">Download Report</button>      \\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DatabaseService } from '../services/dbService/database.service';\nimport { Angular2Csv } from 'angular2-csv/Angular2-csv';\n\n@Component({\n  templateUrl: './display-table.component.html',\n  styleUrls: ['./display-table.component.css']\n})\nexport class DisplayTableComponent implements OnInit {\n  orders = [];\n  response: any;\n\n  constructor(private _dbService: DatabaseService) {\n   }\n\n  ngOnInit() {\n    this._dbService.getOrdersData()\n      .subscribe(res => this.orders = res.message.data,\n                 error => console.log(error));\n  }\n\n  updateOrder(order: any): void {\n    this._dbService.updateOrder(order)\n      .subscribe(res => this.orders = res.message.data,\n                 error => console.log(error));\n\n    this._dbService.getOrdersData()\n      .subscribe(res => { this.orders = res.message.data;\n      console.log('orders: ', this.orders); },\n                 error => console.log(error));\n  }\n\n  generateReport(): void {\n    new Angular2Csv(this.orders, 'My Report');\n  }\n}\n","module.exports = \"<h1>Welcome to Dalviroo Kitchens</h1>\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './home.component.html'\r\n})\r\nexport class HomeComponent {\r\n\r\n}\r\n","module.exports = \".navbar-brand {\\r\\n    left: 0%;\\r\\n}\"","module.exports = \"<div>\\r\\n    <nav class=\\\"navbar navbar-inverse\\\">\\r\\n        <div class=\\\"container-fluid\\\">\\r\\n            <div class=\\\"navbar-header\\\">\\r\\n                <a href=\\\"#\\\" class=\\\"navbar-brand\\\">Dalviroo</a>\\r\\n            </div>\\r\\n            <div class=\\\"collapse navbar-collapse\\\">\\r\\n                <ul class=\\\"nav navbar-nav\\\">\\r\\n                    <li><a [routerLink]=\\\"['/home']\\\">Home</a></li>\\r\\n                    <li><a [routerLink]=\\\"['/order']\\\" routerLinkActive=\\\"active\\\">Order</a></li>\\r\\n                    <li><a [routerLink]=\\\"['/predict']\\\" routerLinkActive=\\\"active\\\">Predict</a></li>\\r\\n                    <li><a [routerLink]=\\\"['/display']\\\" routerLinkActive=\\\"active\\\">Display Report</a></li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n    </nav>\\r\\n    <router-outlet></router-outlet>\\r\\n</div>  \\r\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-navbar',\r\n    templateUrl: 'navbar.component.html',\r\n    styleUrls: ['navbar.component.css']\r\n})\r\nexport class NavbarComponent {\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-3\\\"></div>\\n  <div class=\\\"col-md-6\\\">\\n    <legend>Add Order</legend>\\n    <form #orderForm=\\\"ngForm\\\" [formGroup]=\\\"order\\\" (ngSubmit)=\\\"submitOrder(orderForm.value); orderForm.reset()\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Name:</label>\\n        <select name=\\\"dishes\\\" class=\\\"form-control\\\" (change)=\\\"selectChange($event)\\\">\\n          <option value=\\\"\\\" selected=\\\"selected\\\" disabled>Please select dish</option>\\n          <option *ngFor=\\\"let dish of dishes\\\" [value]=\\\"dish.name\\\">{{ dish.name }}</option>\\n        </select>  \\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"quantity\\\">Quantity:</label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"quantity\\\" required>\\n      </div>\\n      <div class=\\\"form\\\">\\n        <button [disabled]= !orderForm.valid class=\\\"btn btn-success\\\">Submit</button>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { OrderModel } from './order-model';\nimport { FormControl, FormGroup, Validators, FormsModule } from '@angular/forms';\nimport { DatabaseService } from 'src/app/services/dbService/database.service';\n\n@Component({\n  templateUrl: './order.component.html',\n  styleUrls: ['./order.component.css']\n})\nexport class OrderComponent implements OnInit {\n\n  dishes: string[] = [];\n  response: any;\n\n  order = new FormGroup({\n    dish : new FormControl(),\n    quantity : new FormControl(),\n  });\n\n  constructor(private _dbService: DatabaseService) { }\n\n  ngOnInit() {\n    this._dbService.getDishNames()\n      .subscribe(response => this.dishes = response.message.data ,\n                 error => console.log(error));\n  }\n\n  selectChange(event): void {\n    this.order.patchValue({\n      dish: event.target.value\n    });\n  }\n\n  submitOrder(orderForm: any): void {\n    this._dbService.placeOrder(orderForm)\n      .subscribe(response => this.response = response,\n                 error => console.log(error));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Injectable()\nexport class DatabaseService {\n\n  private _url = 'http://localhost:8000';\n  dishes: Array<string> = ['a', 'b', 'c'];\n\n  constructor(private _http: HttpClient) { }\n\n  getDishNames(): Observable<any> {\n    return this._http.get<any>(this._url + '/getDishes');\n  }\n\n  getOrdersData(): Observable<any> {\n    return this._http.get<any>(this._url + '/getOrders');\n  }\n\n  placeOrder(orderForm: any): Observable<any> {\n    console.log('order in service:', orderForm);\n    return this._http.post<any>(this._url + '/placeOrder', orderForm);\n  }\n\n  predictOrders(predictionForm: any): Observable<any> {\n    console.log('prediction in service:', predictionForm);\n    return this._http.post<any>(this._url + '/predict', predictionForm);\n  }\n\n  updateOrder(order: any): Observable<any> {\n    return this._http.post<any>(this._url + '/updateOrder', order);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-3\\\"></div>\\n  <div class=\\\"col-md-6\\\">\\n    <legend>Predict Quantities</legend>\\n    <form #predictForm=\\\"ngForm\\\" [formGroup]=\\\"orderPrediction\\\" (ngSubmit)=\\\"makePrediction(predictForm.value); predictForm.reset()\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"name\\\">Name:</label>\\n        <select name=\\\"dishes\\\" class=\\\"form-control\\\" (change)=\\\"selectChange($event)\\\">\\n          <option value=\\\"\\\" selected=\\\"selected\\\" disabled>Please select dish</option>\\n          <option *ngFor=\\\"let dish of dishes\\\" [value]=\\\"dish.name\\\">{{ dish.name }}</option>\\n        </select>  \\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"quantity\\\">Quantity:</label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"quantity\\\" required>\\n      </div>\\n      <div class=\\\"form\\\">\\n        <button [disabled]= !predictForm.valid class=\\\"btn btn-success\\\">Submit</button>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n  \"","import { Component, OnInit } from '@angular/core';\nimport { DatabaseService } from 'src/app/services/dbService/database.service';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  templateUrl: './set-prediction.component.html',\n  styleUrls: ['./set-prediction.component.css']\n})\nexport class SetPredictionComponent implements OnInit {\n\n  dishes: string[] = [];\n  response: any;\n  orderPrediction = new FormGroup({\n    dish : new FormControl(),\n    quantity : new FormControl(),\n  });\n  constructor(private _dbService: DatabaseService) { }\n\n  ngOnInit() {\n    this._dbService.getDishNames()\n    .subscribe(data => this.dishes = data.message.data,\n               error => console.log(error));\n  }\n\n  selectChange(event): void {\n    this.orderPrediction.patchValue({\n      dish: event.target.value\n    });\n  }\n\n  makePrediction(predictionForm: any): void {\n    this._dbService.predictOrders(predictionForm)\n      .subscribe(response => this.response = response,\n                 error => console.log('error:', error)\n      );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}